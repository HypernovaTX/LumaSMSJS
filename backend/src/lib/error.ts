// ==================== GLOBAL ERROR OBJ ====================
/**
 *  err - error code from keys of "const errors"
 *  message - (optional) shows "[Reason] - <message goes here>", really useful if you pass errors generated by things like requests, etc.
 */
import fs from 'fs';

export type ErrorCodes = keyof typeof errors;
export interface ErrorObj {
  error: ErrorCodes;
  message: string;
  reason?: string;
}
export const errors = {
  // default errors
  default: 'An unknown error has occured.',
  invalidJson: 'Invalid JSON format used within the request!',
  invalidParam: 'Invalid parameters used in the request!',

  // database
  dbConnect: 'SQL Connection fail!',
  dbDisconnect: 'SQL Disconnection fail!',
  dbInsertNumber: 'SQL INSERT "column" "value" array counts does not match!',
  dbOrderNumber: 'SQL ORDER "column" "value" array counts does not match!',
  dbQuery: 'SQL Query fail!',
  dbUpdateNumber: 'SQL UPDATE "column" "value" array counts does not match!',

  // file
  fileImageInvalid: 'Image is not in PNG, JPG, nor GIF format!',
  fileNameTooLong: 'File name is too long!',
  fileUnlink: 'File unlink error!',
  noFile: 'No file has been uploaded as per requirement!',

  //submission - MAIN
  submissionNotFound: 'The selected submission is not found!',

  // user
  userCookie: 'User cookie not found!',
  userCookieInvalid: 'User cookie is invalid!',
  userDeleteOwn: 'You cannot delete your own account!',
  userEmailExists: 'Email is already taken!',
  userEmailSame: 'New email is the same as the old one!',
  userExists: 'Username and / or email are already taken!',
  userJwt: 'User token related error!',
  userListNumber: 'listUser "order" "asc" array counts does not match!',
  userLogin: 'Username and password are incorrect!',
  userNameExists: 'Username is already taken!',
  userNameSame: 'New username is the same as the old one!',
  userNotFound: 'User not found!',
  userPasswordSame: 'New password is the same as the old one!',
  userPasswordOldWrong: 'The old password is incorrect!',
  userPasswordWrong: 'The password is incorrect!',
  userRoleGid: '"gid" is read-only in user roles!',
  userRoleInUse: 'The selected role is used by one or more user!',
  userRoleNotFound: 'User role not found!',
  userPermission: 'User is not permitted to perform such action!',
  userRootPermit: 'Only root admins are permitted to perform this action!',
  userStaffPermit: 'Only staff are permitted to perform this action!',
  userUpdateInvalid: "Invalid update to user's profile!",
  userUpdateOther: "You cannot update other user's profile!",
};

export function isError(x: any) {
  return (x as ErrorObj)?.error && (x as ErrorObj).message;
}

export default function ERR(error: ErrorCodes, reason?: string): ErrorObj {
  const message = errors[error];
  // Only calls if it's not blank
  console.log(`\x1b[41m[LUMASMS API ERROR] - (${error}) ${message}\x1b[0m`);
  if (reason) {
    console.log(`\x1b[33m[Reason] - ${reason}\x1b[0m`);
  }
  // Log files
  const date = new Date().toUTCString();
  const data = `${date} - [${error}] ${message}\n`;
  const data2 = reason ? `${date} - ${reason}\n` : '';
  logFile(data, data2);
  return { error, message, reason };
}

function logFile(data: string, data2?: string) {
  fs.writeFile('error.log', data, { flag: 'a+' }, () => {});
  data2 && fs.writeFile('error.log', data2, () => {});
}
