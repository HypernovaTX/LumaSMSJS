// ==================== GLOBAL ERROR OBJ ====================
/**
 *  err - error code (see the switch statement for refernece, and add if you need one.)
 *  message - (optional) shows "[Reason] - <message goes here>", really useful if you pass errors generated by things like requests, etc.
 */
export const errors = {
  // default error
  default: 'An unknown error has occured.',
  
  // database
  dbConnect: 'Failed to connect to the database!',
  dbDisconnect: 'Failed to disconnect from the database!',
  dbQuery: 'Failed to perform the SQL query!',
  dbOrderNumber: 'SQL query ORDER array number does not match!',
  dbInsertNumber: 'SQL query ORDER array number does not match!',
}

type errorCodes = keyof typeof errors;
type errorObj = {
  error: errorCodes,
  message: string,
  reason?: string,
}

export default function ERR(error: errorCodes, reason?: string): errorObj {
    const message = errors[error];
    //Only calls if it's not blank
    console.log(`\x1b[41m[LUMASMS API ERROR] ${message}\x1b[0m`);
    if (reason) {
      console.log(`\x1b[33m[Reason] - ${reason}\x1b[0m`);
    }
    return { error, message, reason };

    // switch (this.error) {
    //   // gr# - general errors

    //   // us# - related to user
    //   case "us0":
    //     output += `US0 - Please check the parameters in "checkExistingUser()"!`;
    //     break;
    //   case "us1":
    //     output += `US1 - Please check the parameters in "loginRequest()"!`;
    //     break;
    //   case "us2":
    //     output += `US2 - Error while processing bcrypt.match in login!`;
    //     break;
    //   case "us3":
    //     output += `US3 - Please check the parameters in "doRegister()"!`;
    //     break;
    //   case "us4":
    //     output += `US4 - Error while processing bcrypt.hash in register!`;
    //     break;
    //   case "us5":
    //     output += `US5 - User is not logged in to perform the action!`;
    //     break;
    //   case "us6":
    //     output += `US6 - User does not have the right permission to perform the action!`;
    //     break;
    //   case "us7":
    //     output += `US7 - Param 'inputs' is blank or invalid for "updateUserProfile()"!`;
    //     break;
    //   case "us8":
    //     output += `US8 - Wrong password for verification"!`;
    //     break;
    //   case "us9":
    //     output += `US9 - Old and new passwords are the same!`;
    //     break;
    //   case "us10":
    //     output += `US10 - Email is already taken!`;
    //     break;
    //   case "us11":
    //     output += `US11 - Only root admins can delete users!`;
    //     break;

    //   // re# - related to submission
    //   case "re0":
    //     output += `RE0 - User does not have the right permission to perform the action!`;
    //     break;
    //   case "re1":
    //     output += `RE1 - One or more input data is empty!`;
    //     break;
    //   case "re2":
    //     output += `RE2 - The selected submission does not exist for updates!`;
    //     break;
    //   case "re3":
    //     output += `RE3 - One of more required file is empty!`;
    //     break;

    //   // fi# - related to files
    //   case "fi1":
    //     output += `FI1 - Incorrect directory to write file.`;
    //     break;
    // }
}
